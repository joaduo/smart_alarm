#!/bin/bash
# smart_alarm
# Copyright (c) 2020, Joaquin G. Duo
# Code Licensed under LGPL License. See LICENSE file.

conf_file=/etc/salarm_android_server.conf

if [[ -e $conf_file ]];then
  source $conf_file
fi

ANDROID_AUTH_TOKEN=${ANDROID_AUTH_TOKEN}
ANDROID_SERVER_METHODS=${ANDROID_SERVER_METHODS:-""}
ANDROID_SERVER_PORT=${ANDROID_SERVER_PORT:-8001}
ANDROID_SERVER_LISTEN=${ANDROID_SERVER_LISTEN:-127.0.0.1}

TEMP_DIR=${TEMP_DIR:-$HOME}
LOG_FILE=$TEMP_DIR/$(basename $0).log

function exec_cmd(){
    echo 'Executing:'
    echo "    $(printf ' %q' "$@")"
    echo '---------------------' >> $LOG_FILE
    echo "$(date) Executing: $(printf ' %q' "$@")" >> $LOG_FILE
    if [[ $VERBOSE == 0 ]] ; then
        eval $(printf ' %q' "$@") >> $LOG_FILE 2>&1
        local ret=$?
    else
        eval $(printf ' %q' "$@") | tee -a $LOG_FILE 2>&1
        local ret=$?
    fi
    if [[ $ret != 0 ]] ; then
        echo "Command failed: $*
        ret val: $ret
        "
        echo "Check $LOG_FILE:"
        tail $LOG_FILE
        exit 1
    fi
    return $ret
}

if ! python3 -c 'import smart_alarm' ; then
    echo "ERROR: smart_alarm package or python3 not installed"
    exit 1
fi

init_file="$(python3 -c 'import smart_alarm; print(smart_alarm.__path__[0])')"/android_init.py
server_file="$(python3 -c 'import smart_alarm; print(smart_alarm.__path__[0])')"/android_server.py

if [[ $* == *--deploy* ]]; then
    export FORCE_COPY=1
    echo "Just deploying files to android..."
    exec_cmd salarm_android_python --only-copy $init_file
    exec_cmd salarm_android_python --only-copy $server_file
    export FORCE_COPY=0
    exit 0
fi

function init_server(){
    local test_output=$(salarm_android_python -c $init_file)
    if [[ $test_output == *"SL4A: Connection refused"* ]];then
        exec_cmd salarm_android_python -s -d $init_file && \
        sleep 14 && \
        salarm_android_python -d $init_file && \
        sleep 8 && \
        test_output=$(salarm_android_python -c $init_file)
    fi

    if [[ $test_output != *"SL4A: Connection OK"* ]]; then
      echo "ERROR: fatal error on android side check below:"
      echo "$test_output"
      return 1
    fi
    return 0
}

if init_server ;then
    echo adb forward tcp:$ANDROID_SERVER_PORT tcp:$ANDROID_SERVER_PORT "#Forwarding port"
    adb forward tcp:$ANDROID_SERVER_PORT tcp:$ANDROID_SERVER_PORT
    salarm_android_python $server_file --adb --listen $ANDROID_SERVER_LISTEN --port $ANDROID_SERVER_PORT --token "'$ANDROID_AUTH_TOKEN'" --methods "'$ANDROID_SERVER_METHODS'"
else
    exit 1
fi




