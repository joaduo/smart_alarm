#!/bin/bash
# smart_alarm
# Copyright (c) 2020, Joaquin G. Duo
# Code Licensed under LGPL License. See LICENSE file.

cmd_name=$(basename $0)

PKG=qpython-app-release-v1.4.3.apk

DEPLOY_ANDROID_SDCARD_DIR=${DEPLOY_ANDROID_SDCARD_DIR:-/sdcard}
DEPLOY_ANDROID_DOWNLOAD_DIR=${DEPLOY_ANDROID_DOWNLOAD_DIR:-$DEPLOY_ANDROID_SDCARD_DIR/Download}
DEPLOY_ANDROID_REINSTALL=${DEPLOY_ANDROID_REINSTALL}
DEPLOY_ANDROID_DEBUG=${DEPLOY_ANDROID_DEBUG:-1}
TEMP_DIR=${TEMP_DIR:-/var/salarm}

LOG_FILE=$TEMP_DIR/$cmd_name.log

WORKING_DIR=/var/salarm
HOME_SALARM=/home/salarm
SERVICE_USER=salarm

function ask_variable(){
    local var_name=$1
    local question="$2"
    local default_value="$3"
    if [[ ${!var_name} != "" ]] ; then
        var_value="${!var_name}"
    else
        read -p "    $question" var_value
    fi
    var_value=${var_value:-$default_value}
    case "${var_value,,}" in
        y|yes|true|1)
        echo 1
        ;;
        n|no|false|0)
        echo 0
        ;;
        *)
        echo "$var_value"
        ;;
    esac
}

function exec_cmd(){
    echo 'Executing:'
    echo "    $(printf ' %q' "$@")"
    echo '---------------------' >> $LOG_FILE
    echo "$(date) Executing: $(printf ' %q' "$@")" >> $LOG_FILE
    if [[ $VERBOSE == 0 ]] ; then
        eval $(printf ' %q' "$@") >> $LOG_FILE 2>&1
        local ret=$?
    else
        eval $(printf ' %q' "$@") | tee -a $LOG_FILE 2>&1
        local ret=$?
    fi
    if [[ $ret != 0 ]] ; then
        echo "Command failed: $*
        ret val: $ret
        "
        echo "Check $LOG_FILE:"
        tail $LOG_FILE
        exit 1
    fi
    return $ret
}

function create_system_user(){
  useradd -r $SERVICE_USER
  #Allow salarm to access USB
  usermod -a -G plugdev $SERVICE_USER
  mkdir -p $WORKING_DIR/static
  chown $SERVICE_USER:$SERVICE_USER -R $WORKING_DIR
  #adb wants a /home/<user> folder
  mkdir -p $HOME_SALARM
  chown $SERVICE_USER:$SERVICE_USER -R $HOME_SALARM
  echo "salarm ALL=(ALL) NOPASSWD: $(which salarm_open_port)" > /etc/sudoers.d/010_salarm-nopasswd
}

function install_pkg(){
  exec_cmd apt-get install adb
  if [[ $(adb shell ls -d $DEPLOY_ANDROID_DOWNLOAD_DIR) == *"No such file or directory"* ]]; then
    echo "Directory $DEPLOY_ANDROID_DOWNLOAD_DIR does not exist on android device, please specify it via DEPLOY_ANDROID_DOWNLOAD_DIR env var"
    return 1
  fi

  local qpython_url=https://github.com/qpython-android/qpython/releases/download/v1.4.3/qpython-app-release.apk
  if install_apk org.qpython.qpy qpython-app-release-v1.4.3.apk $qpython_url ;then
      exec_cmd salarm_android_python --patch-end-sh
  fi
  
  local sshd_url=http://www.galexander.org/software/simplesshd/SimpleSSHD-19.apk
  if install_apk org.galexander.sshd SimpleSSHD-19.apk $sshd_url ;then
      echo "NOTICE: Enter into your android device and setup SSHD (start on boot,etc) and allow su for the app if needed."
  fi
}

function install_apk(){
  local pkg_name=$2
  local pkg_fname=$1
  local apk_url=$3
  local pkg_path=$TEMP_DIR/$pkg_fname
  if [[ ! -e $pkg_path ]] ; then
      echo "Downloading $apk_url to $pkg_path"
      exec_cmd wget $apk_url -O $pkg_path
  fi

  echo "Sending $pkg_path to android device..."
  exec_cmd salarm_android_cp $pkg_path $DEPLOY_ANDROID_DOWNLOAD_DIR

  local already_installed=$(adb shell pm list packages | grep $pkg_name)
  local ret_val=1
  local remote_path=$DEPLOY_ANDROID_DOWNLOAD_DIR/$pkg_fname
  if [[ $already_installed != "" ]] ; then
      local reinstall=$(ask_variable DEPLOY_ANDROID_REINSTALL "Uninstall and reinstall $pkg_fname?(y/N) " N)
      if [[ $reinstall == 1 ]]; then
        echo "Reinstalling $pkg_fname..."
        exec_cmd adb shell pm uninstall $pkg_name && \
        exec_cmd adb shell pm install $remote_path
        ret_val=0
      fi
  else
      exec_cmd adb shell pm install $remote_path
      ret_val=0
  fi
  return $ret_val
}

function install_android_server(){
    echo "Installing android server...."
    local execpath=salarm_android_server
    $execpath --deploy
    local fpath=/etc/systemd/system/salarm_android_server.service
    local fcontents="[Unit]
Description=Smart Alarm Android Server
After=network.target
RestartSec=10
StartLimitBurst=10000

[Service]
ExecStart=$execpath
WorkingDirectory=$WORKING_DIR
StandardOutput=inherit
StandardError=inherit
Restart=always
User=$SERVICE_USER

[Install]
WantedBy=multi-user.target
"
    echo "Creating $fpath..."
    echo "$fcontents" > $fpath

    exec_cmd sudo systemctl daemon-reload && \
    exec_cmd sudo systemctl enable salarm_android_server.service && \
    exec_cmd sudo systemctl restart salarm_android_server.service && \
    systemctl status salarm_android_server.service
}

function install_cmds_server(){
    echo "Installing cmds server...."
    local fpath=/etc/systemd/system/salarm_cmds_server.service
    local fcontents="[Unit]
Description=Smart Alarm Cmds server
After=network.target
RestartSec=5
StartLimitBurst=10000

[Service]
ExecStart=salarm_cmds_server
WorkingDirectory=$WORKING_DIR
StandardOutput=inherit
StandardError=inherit
Restart=always
User=$SERVICE_USER

[Install]
WantedBy=multi-user.target
"
    echo "Creating $fpath..."
    echo "$fcontents" > $fpath

    exec_cmd sudo systemctl daemon-reload && \
    exec_cmd sudo systemctl enable salarm_cmds_server.service && \
    exec_cmd sudo systemctl restart salarm_cmds_server.service && \
    systemctl status salarm_cmds_server.service
}

function install_mail_server(){
    echo "Installing mail server...."
    local fpath=/etc/systemd/system/salarm_mail_server.service
    local fcontents="[Unit]
Description=Smart Alarm Mail server
After=network.target
RestartSec=5
StartLimitBurst=10000

[Service]
ExecStart=salarm_mail_server
WorkingDirectory=$WORKING_DIR
StandardOutput=inherit
StandardError=inherit
Restart=always
User=$SERVICE_USER

[Install]
WantedBy=multi-user.target
"
    echo "Creating $fpath..."
    echo "$fcontents" > $fpath

    exec_cmd sudo systemctl daemon-reload && \
    exec_cmd sudo systemctl enable salarm_mail_server.service && \
    exec_cmd sudo systemctl restart salarm_mail_server.service && \
    systemctl status salarm_mail_server.service
}

if [[ $USER != "root" ]]; then
  echo "You must run this command with sudo or as root"
  exit 1
fi

VERBOSE=${VERBOSE:-0}
while test $# -gt 0; do
case "$1" in
    -v|--verbose)
    VERBOSE=1
    shift
    ;;
    -U|--user)
    create_system_user
    shift
    ;;
    -P|--package)
    install_pkg
    shift
    ;;
    -A|--android-server)
    install_android_server
    shift
    ;;
    -C|--cmds-server)
    install_cmds_server
    shift
    ;;
    -M|--mail-server)
    install_mail_server
    shift
    ;;
    -a|--all)
    create_system_user && install_pkg && install_android_server && install_android_server && install_mail_server
    shift
    ;;
    -h|--help)
    echo "$cmd_name [--all] [-U|--user] [-P|--package] [-A|--android-server] [-C|--cmds-server] [-M|--mail-server] [-v|--verbose] [-h|--help]"
    echo "
-U|--user            create 'salarm' system user and directories
-P|--package         install adb (on ubuntu) and install android package on the connected phone (through adb)
-A|--android-server  install systemd salarm_android_server (runs in the phone as a 'local' command through adb)
-C|--cmds-server     install systemd salarm_cmds_server (fastapi local server)
-M|--mail-server     install systemd salarm_email_server (SMTP local server)
-v|--verbose         be verbose while running commands
-h|--help            this help
    "
    exit 0
    ;;
    *)
    break
    ;;
esac
done


